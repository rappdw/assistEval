name: Dependency Updates

on:
  schedule:
    - cron: '0 9 * * 1'  # Weekly on Monday at 9 AM UTC
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - all

jobs:
  update-dependencies:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Backup current lock file
      run: cp uv.lock uv.lock.backup

    - name: Update dependencies
      run: |
        case "${{ github.event.inputs.update_type || 'patch' }}" in
          "patch")
            echo "Updating patch versions only"
            uv sync --upgrade-package "*"
            ;;
          "minor")
            echo "Updating minor versions"
            uv sync --upgrade
            ;;
          "major"|"all")
            echo "Updating all versions (including major)"
            uv sync --upgrade
            ;;
        esac

    - name: Install updated dependencies
      run: uv sync --all-extras

    - name: Run security audit
      run: |
        # Check for known vulnerabilities
        uv run pip-audit --format=json --output=security-audit.json || true

        # Create human-readable summary
        if [ -f security-audit.json ]; then
          echo "## Security Audit Results" > security-summary.md
          jq -r '.vulnerabilities[] | "- **\(.package)** \(.installed_version): \(.vulnerability.id) - \(.vulnerability.summary)"' security-audit.json >> security-summary.md || echo "No vulnerabilities found" >> security-summary.md
        fi

    - name: Check for changes
      id: changes
      run: |
        if ! cmp -s uv.lock uv.lock.backup; then
          echo "changes=true" >> $GITHUB_OUTPUT

          # Generate change summary
          echo "## Dependency Changes" > changes-summary.md
          echo "" >> changes-summary.md

          # Compare lock files to show what changed
          echo "### Updated Packages" >> changes-summary.md
          # This is a simplified diff - in practice you'd want more sophisticated parsing
          diff uv.lock.backup uv.lock | grep "^[<>]" | head -20 >> changes-summary.md || echo "Changes detected but diff unavailable" >> changes-summary.md
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Run tests with updated dependencies
      if: steps.changes.outputs.changes == 'true'
      run: |
        echo "Running test suite with updated dependencies..."
        uv run pytest --tb=short --maxfail=5

        echo "Running linting checks..."
        uv run ruff check . --output-format=json > ruff-results.json || true
        uv run mypy . --json-report mypy-results.json || true

    - name: Create Pull Request
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies (${{ github.event.inputs.update_type || 'patch' }})"
        title: "chore: update dependencies (${{ github.event.inputs.update_type || 'patch' }})"
        body: |
          ## 📦 Dependency Updates

          This PR updates project dependencies with ${{ github.event.inputs.update_type || 'patch' }} version updates.

          ### Changes Summary
          ${{ steps.changes.outputs.changes == 'true' && '✅ Dependencies updated' || '❌ No changes detected' }}

          ### Security Audit
          Security audit completed - check artifacts for detailed results.

          ### Testing Status
          - ✅ Test suite passed with updated dependencies
          - ✅ Linting checks completed
          - ✅ Type checking completed

          ### Manual Review Required
          - [ ] Review dependency changes for breaking changes
          - [ ] Verify benchmark performance is not impacted
          - [ ] Check for any new security vulnerabilities
          - [ ] Validate all workflows still function correctly

          ### Files Changed
          - `uv.lock` - Updated dependency lock file
          - `pyproject.toml` - May contain version constraint updates

          ---

          **Automated by**: Dependency Update Workflow
          **Update Type**: ${{ github.event.inputs.update_type || 'patch' }}
          **Triggered**: ${{ github.event_name == 'schedule' && 'Scheduled weekly update' || 'Manual trigger' }}
        branch: chore/update-dependencies-${{ github.run_number }}
        delete-branch: true
        labels: |
          dependencies
          automated
          ${{ github.event.inputs.update_type || 'patch' }}-update

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-${{ github.run_number }}
        path: |
          security-audit.json
          security-summary.md
          changes-summary.md
          ruff-results.json
          mypy-results.json
        retention-days: 30

    - name: Create security issue if vulnerabilities found
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            if (fs.existsSync('security-audit.json')) {
              const audit = JSON.parse(fs.readFileSync('security-audit.json', 'utf8'));

              if (audit.vulnerabilities && audit.vulnerabilities.length > 0) {
                const summary = fs.readFileSync('security-summary.md', 'utf8');

                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🚨 Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
                  body: `## Security Alert\n\n` +
                        `The automated dependency audit has detected security vulnerabilities.\n\n` +
                        `${summary}\n\n` +
                        `### Action Required\n` +
                        `- Review the vulnerabilities listed above\n` +
                        `- Update affected packages to secure versions\n` +
                        `- Test the application after updates\n\n` +
                        `**Audit Run**: [Workflow #${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
                  labels: ['security', 'vulnerability', 'dependencies', 'high-priority']
                });
              }
            }
          } catch (error) {
            console.log('Security issue creation failed:', error.message);
          }

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-2.0, GPL-3.0
