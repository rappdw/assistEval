[project]
name = "bench"
version = "0.1.0"
description = "ChatGPT vs Microsoft Copilot Evaluation Harness - A fair, extensible, and repeatable evaluation framework for comparing AI assistants"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Assistant Evaluation Team"}
]
license = {text = "MIT"}
keywords = ["ai", "evaluation", "benchmark", "chatgpt", "copilot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "jsonschema>=4.0.0",
    "pyyaml>=6.0.0",
    "jsonpath-ng>=1.6.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "pre-commit>=4.3.0",
    "ruff>=0.12.11",
    # Analytics dependencies
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "plotly>=5.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "flake8>=6.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "types-pyyaml>=6.0.0",
    "types-click>=7.0.0",
]

[project.scripts]
bench = "bench.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T20", # flake8-print
]
ignore = [
    "S101", # assert used
    "S603", # subprocess call
    "S607", # starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"bench/adapters/*_manual.py" = ["T201"]
"tests/test_evaluation_system.py" = ["T201"]

[tool.ruff.format]
# Use black-compatible formatting
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Ignore missing imports for external packages without type stubs
[[tool.mypy.overrides]]
module = [
    "rich.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=bench",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[dependency-groups]
dev = [
    "pandas-stubs>=2.3.2.250827",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "types-flask>=1.1.6",
    "types-flask-cors>=6.0.0.20250809",
    "types-jsonschema>=4.25.1.20250822",
    "types-pyyaml>=6.0.12.20250822",
]
