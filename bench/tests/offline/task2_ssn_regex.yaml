# Task 2: DLP Regex for U.S. SSN - Pattern Validation

id: "offline.task2.ssn_regex"
name: "Task 2 â€” DLP Regex for U.S. SSN"
category: "offline"
capability_profile:
  web: "forbidden"
  json_required: true
  retries: 1

prompt:
  system: |
    You are an enterprise assistant. Follow instructions exactly. Do not browse the web.
    Do not fabricate sources. Respond only in valid JSON format.
  user: |
    Create a regular expression to identify valid U.S. Social Security Numbers (SSNs).

    Requirements:
    - Match format: XXX-XX-XXXX (with hyphens)
    - Reject invalid area codes: 000, 666, 900-999
    - Reject invalid group codes: 00
    - Reject invalid serial numbers: 0000
    - Use anchors to match complete strings only
    - No catastrophic backtracking

    Test your regex against these lines:
    123-45-6789
    000-12-3456
    123-00-4567
    123-45-0000
    666-12-3456
    987-65-4321
    555-55-5555
    123-456-7890
    12-345-6789
    1234-56-789
    900-12-3456
    123-45-67890

    Return in JSON format:
    {
      "task2_ssn_regex": {
        "regex_pattern": "your_regex_here",
        "matching_lines": [1, 2, 3],
        "explanation": "Brief explanation of regex components"
      }
    }

expectation:
  schema_name: "task2_ssn_regex"
  fields:
    - path: "$.task2_ssn_regex.regex_pattern"
      type: "string"
    - path: "$.task2_ssn_regex.matching_lines"
      type: "array"
    - path: "$.task2_ssn_regex.explanation"
      type: "string"

scoring:
  evaluator: "regex_match"
  config:
    timeout_ms: 100
    weights:
      regex_validity: 18
      line_matches: 12
    validity_checks:
      anchors_required: true
      area_code_restrictions: [000, 666, "9xx"]
      group_code_restrictions: ["00"]
      serial_restrictions: ["0000"]

fixtures:
  - path: "fixtures/text/ssn_validation_lines.txt"
    variable: "test_lines"

answer_key: "answer_keys/offline/task2_lines.json"
